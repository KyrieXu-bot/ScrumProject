# -*- coding: utf-8 -*- 
# @Time : 9/25/2021 6:51 PM 
# @Author : 10478411, Hongzhi Zhao
# @File : GedcomProcess.py
# @Description : some data preprocess, process functions, generating some files

import time

from prettytable import PrettyTable
from GedcomClass import Person
from GedcomClass import Family

month_dict = {
    "JAN": "1", "FEB": "2", "MAR": "3", "APR": "4", "MAY": "5", "JUN": "6", "JUL": "7", "AUG": "8", "SEP": "9",
    "OCT": "10", "NOV": "11", "DEC": "12"
}


def getGEDCOM(GEDCOM_path: str, output_txt_path: str):
    """
    preprocess the GEDCOM file, mark if the tag is valid, use "|" and "<--" to split the item and make them clear
    :param GEDCOM_path: path of the original GEDCOM file
    :param output_txt_path: path of the output
    :return:
    """
    valid_tags = ["INDI", "NAME", "SEX", "BIRT", "BEAT", "FAMC", "FAMS",
                  "FAM", "MARR", "HUSB", "WIFE", "CHIL", "DIV", "DATE",
                  "HEAD", "TRLR", "NOTE"]
    f = open(GEDCOM_path)
    with open(output_txt_path, 'w') as output:
        output.write("NOTE: ....." + '\n\n')
        for line in open(GEDCOM_path, mode='r', encoding='UTF-8-sig'):
            if line != "\n":
                temp = line.split(" ")
                if temp[0] == 'NOTE:':
                    continue
                last_string = temp[-1][0:-1]
                temp[-1] = last_string
                if len(temp) > 2:
                    if temp[2] == 'INDI' or temp[2] == 'FAM':
                        swap = temp[1]
                        temp[1] = temp[2]
                        temp[2] = swap
                        head = temp[0] + '|' + temp[1] + '|Y|'
                        tail = ' '.join(temp[2:])
                        result = "<--" + head + tail
                        output.write(result + '\n')
                        continue
                if temp[1] in valid_tags:
                    head = temp[0] + '|' + temp[1] + '|Y|'
                    tail = ' '.join(temp[2:])
                    result = "<--" + head + tail
                    output.write(result + '\n')
                    continue
                elif temp[1] not in valid_tags:
                    head = temp[0] + '|' + temp[1] + '|N|'
                    tail = ' '.join(temp[2:])
                    result = "<--" + head + tail
                    output.write(result + '\n')
                    continue


def getValidRecords(GEDCOM_processed_path: str, valid_record_path: str):
    """
    :param GEDCOM_processed_path: the path of preprocessed file generated by ProcessGEDCOM function
    :param valid_record_path: the path of output file
    :return:
    """
    with open(valid_record_path, 'w') as output:
        output.write("NOTE: ....." + '\n\n')
        for line in open(GEDCOM_processed_path, mode='r', encoding='UTF-8-sig'):
            if line != "\n":
                if line.split(' ')[0] == 'NOTE:':
                    continue
                temp = line.split("|")
                last_string = temp[-1][0:-1]
                temp[-1] = last_string
                if temp[2] == 'Y':
                    if temp[0] == '<--0':
                        output.write('------------------' + '\n')
                    output.write('|'.join(temp) + '\n')


def getAge(birthday: list, present_or_death: list):
    """
    :param birthday: the birthday list, format: [day, month, year]
    :param present_or_death: format: [day, month, year]
    :return: age
    """
    birthday = [int(i) for i in birthday]
    present_or_death = [int(i) for i in present_or_death]

    age = present_or_death[2] - birthday[2]
    if present_or_death[1] - birthday[1] < 0:
        age -= 1
    if present_or_death[1] - birthday[1] == 0:  # this month is your birthday month!
        if present_or_death[0] - birthday[0] < 0:  # not your birthday yet~ not that age yet
            age -= 1
    return age


def deleteBackslashN(line: str):
    """
    :param line: line(which is a string) read directly from IO
    :return: list of line without backslash n
    """
    temp = line.split("|")
    last_string = temp[-1][0:-1]
    temp[-1] = last_string
    return temp


def getIndiFamiList(valid_record_path: str):
    """
    traverse the entire preprocessed GEDCOM records and extract information of individuals and families
    :param valid_record_path: preprocessed file
    :return: 2 tables
    """
    file = open(valid_record_path, mode='r', encoding='UTF-8-sig')
    individuals = []
    families = []
    pre_read_flag = 0
    pre_read_line = ''
    while True:
        if pre_read_flag == 1:
            line = pre_read_line
            pre_read_flag = 0
        else:
            line = file.readline()
        if line != "\n":
            if line.split(' ')[0] == 'NOTE:':
                continue
            temp = deleteBackslashN(line)
            if temp[0] == '<--0' and temp[1] == 'INDI':  # find a Person
                person_info = {"ID": temp[3][1:-1], "Name": "NA", "Gender": "NA", "Birthday": "NA", "Age": "NA",
                               "Alive": "NA", "Death": "NA", "Child": "NA", "Spouse": "NA"}
                while True:
                    line = file.readline()
                    if line == '------------------\n':
                        break
                    temp = deleteBackslashN(line)
                    if temp[1] == "NAME":
                        person_info["Name"] = temp[3]
                        continue
                    if temp[1] == "SEX":
                        person_info["Gender"] = temp[3]
                        continue
                    if temp[1] == "BIRT":
                        line = file.readline()
                        temp = deleteBackslashN(line)
                        birth_date = temp[3].split(' ')
                        birth_date[-2] = month_dict[birth_date[-2]]
                        if birth_date[0] == "ABT":
                            birth_date.remove("ABT")
                            person_info["Birthday"] = "about " + '-'.join(birth_date[::-1])
                        else:
                            person_info["Birthday"] = '-'.join(birth_date[::-1])
                        line = file.readline()  # read next line, maybe it's death date
                        temp = deleteBackslashN(line)
                        if temp[1] == "DATE":  # if there's a second date under BIRT, it's death date
                            death_date = temp[3].split(' ')
                            death_date[-2] = month_dict[death_date[-2]]
                            if death_date[0] == "ABT":
                                death_date.remove("ABT")
                                person_info["Death"] = "about " + '-'.join(death_date[::-1])
                            else:
                                person_info["Death"] = '-'.join(death_date[::-1])
                            #  calculate the age and set the Alive status to False
                            person_info["Age"] = getAge(birth_date, death_date)
                            person_info["Alive"] = "False"
                            continue
                        else:  # if there's no death date, then calculate, set the Alive status
                            present_date = time.strftime("%d-%m-%Y", time.localtime()).split('-')
                            person_info["Age"] = getAge(birth_date, present_date)
                            person_info["Alive"] = "True"
                            pre_read_line = line
                            '''
                            if next line is not DATE, then because the function already read the line,
                            we need to send it to the beginning
                            '''
                            pre_read_flag = 1
                        continue
                    if temp[1] == "FAMC":
                        person_info["Child"] = temp[3][1:-1]
                        continue
                    if temp[1] == "FAMS":
                        person_info["Spouse"] = temp[3][1:-1]
                        continue
                individuals.append(person_info)
                continue
            if temp[0] == '<--0' and temp[1] == 'FAM':  # find a family
                family_info = {"ID": temp[3][1:-1], "Married": "NA", "Divorced": "NA", "Husband ID": "NA",
                               "Husband Name": "NA", "Wife ID": "NA", "Wife Name": "NA", "Children": "NA"}
                Children = []
                while True:
                    line = file.readline()
                    if line == '------------------\n':  # at the end of a family, jump out of the while loop
                        break
                    temp = deleteBackslashN(line)
                    if temp[1] == "HUSB":
                        family_info["Husband ID"] = temp[3][1:-1]
                        for record in individuals:
                            if record["ID"] == family_info["Husband ID"]:
                                family_info["Husband Name"] = record["Name"]  # use husband id to find his name
                                break
                        continue  # no need to check other items, so continue
                    if temp[1] == "WIFE":
                        family_info["Wife ID"] = temp[3][1:-1]
                        for record in individuals:
                            if record["ID"] == family_info["Wife ID"]:
                                family_info["Wife Name"] = record["Name"]
                                break
                        continue
                    if temp[1] == "CHIL":
                        Children.append(temp[3][1:-1])
                        continue
                    if temp[1] == "MARR":
                        family_info["Married"] = "Y"
                        line = file.readline()  # read next line, maybe MARR has a date
                        temp = deleteBackslashN(line)
                        if temp[0] == '------------------':
                            pre_read_line = line
                            pre_read_flag = 1
                            continue
                        if temp[1] == "DATE":
                            marry_date = temp[3].split(' ')
                            marry_date[-2] = month_dict[marry_date[-2]]
                            if marry_date[0] == "ABT":
                                marry_date.remove("ABT")
                                family_info["Married"] = "about " + '-'.join(marry_date[::-1])
                            else:
                                family_info["Married"] = '-'.join(marry_date[::-1])
                        else:
                            pre_read_line = line
                            pre_read_flag = 1
                        continue
                    if temp[1] == "DIV":
                        family_info["Divorced"] = "Y"
                        line = file.readline()  # if DIV found, read line below to see if has a date
                        temp = deleteBackslashN(line)
                        if temp[0] == '------------------':
                            pre_read_line = line
                            pre_read_flag = 1
                            continue
                        if temp[1] == "DATE":
                            divorce_date = temp[3].split(' ')
                            divorce_date[-2] = month_dict[divorce_date[-2]]
                            if divorce_date[0] == "ABT":
                                divorce_date.remove("ABT")
                                family_info["Divorced"] = "about " + '-'.join(divorce_date[::-1])
                            else:
                                family_info["Divorced"] = '-'.join(divorce_date[::-1])
                        else:
                            pre_read_line = line
                            pre_read_flag = 1
                        continue
                family_info["Children"] = Children
                families.append(family_info)
                continue
            if temp[0] == '<--0' and temp[1] == 'TRLR':  # find the end symbol
                break
    output = [individuals, families]
    return output


def getTable(dict_list: list, table_path: str):
    individuals, families = dict_list[0], dict_list[1]
    table_indi_keys = []
    for key in individuals[0]:
        table_indi_keys.append(key)
    table_indi = PrettyTable()
    table_indi.field_names = table_indi_keys
    for record in individuals:
        table_indi.add_row([record[key] for key in table_indi_keys])

    table_fami_keys = []
    for key in families[0]:
        table_fami_keys.append(key)
    table_fami = PrettyTable()
    table_fami.field_names = table_fami_keys
    for record in families:
        table_fami.add_row([record[key] for key in table_fami_keys])

    print("Individuals")
    print(table_indi)
    print("Families")
    print(table_fami)

    with open(table_path, 'w') as output:
        output.write('Individuals:\n')
        output.write(str(table_indi) + '\n')
        output.write('Families:\n')
        output.write(str(table_fami) + '\n')


def getIndividuals(indi_fami_dict_list: list):
    individual_list = indi_fami_dict_list[0]
    family_list = indi_fami_dict_list[1]
    person_class_list = []

    for individual in individual_list:
        first_name = individual['Name'].split(' ')[0]
        last_name = individual['Name'].split(' ')[1][1:-1]
        marry_date = 'NA'
        divorce_date = 'NA'
        FID = 'NA'
        if individual["Gender"] == "M":  # if it's male, use his Husband ID to find his marry date
            for family in family_list:
                if individual["ID"] == family["Husband ID"]:
                    FID = family["ID"]
                    marry_date = family["Married"]
                    divorce_date = family["Divorced"]
                    break
        if individual["Gender"] == "F":  # if it's female, use her Wife ID to find her marry date
            for family in family_list:
                if individual["ID"] == family["Wife ID"]:
                    FID = family["ID"]
                    marry_date = family["Married"]
                    divorce_date = family["Divorced"]
                    break

        person = Person(individual["ID"], FID, first_name, last_name, individual["Age"], individual["Birthday"],
                        marry_date, divorce_date, individual["Death"])
        person_class_list.append(person)
    return person_class_list


def getFamilies(indi_fami_dict_list: list):
    family_list = indi_fami_dict_list[1]
    family_class_list = []
    for family in family_list:
        family = Family(family["ID"], family["Married"], family["Divorced"], family["Husband ID"], family["Husband Name"],
                        family["Wife ID"], family["Wife Name"], family["Children"])
        family_class_list.append(family)
    return family_class_list

