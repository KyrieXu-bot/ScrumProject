# -*- coding: utf-8 -*- 
# @Time : 9/25/2021 6:51 PM 
# @Author : 10478411, Hongzhi Zhao
# @File : GEDCOMProcess.py 
# @Description : Project 2的作业，读取GEDCOM，转换并输出

import prettytable
import time

from prettytable import PrettyTable

month_dict = {
    "JAN": "1", "FEB": "2", "MAR": "3", "APR": "4", "MAY": "5", "JUN": "6", "JUL": "7", "AUG": "8", "SEP": "9",
    "OCT": "10", "NOV": "11", "DEC": "12"
}

def ProcessGEDCOM(GEDCOM_path, output_txt_path):
    """
    preprocess the GEDCOM file, mark if the tag is valid, use "|" and "<--" to split the item and make them clear
    :param GEDCOM_path: path of the original GEDCOM file
    :param output_txt_path: path of the output
    :return:
    """
    valid_tags = ["INDI", "NAME", "SEX", "BIRT", "BEAT", "FAMC", "FAMS",
                  "FAM", "MARR", "HUSB", "WIFE", "CHIL", "DIV", "DATE",
                  "HEAD", "TRLR", "NOTE"]
    f = open(GEDCOM_path)
    with open(output_txt_path, 'w') as output:
        output.write("NOTE: Created by Hongzhi Zhao, CWID:10478411" + '\n\n')
        for line in open(GEDCOM_path, mode='r', encoding='UTF-8-sig'):
            if line != "\n":
                temp = line.split(" ")
                if temp[0] == 'NOTE:':
                    continue
                last_string = temp[-1][0:-1]
                temp[-1] = last_string
                # print("-->" + ' '.join(temp))
                # output.write("-->" + ' '.join(temp) + '\n')
                if len(temp) > 2:
                    if temp[2] == 'INDI' or temp[2] == 'FAM':
                        swap = temp[1]
                        temp[1] = temp[2]
                        temp[2] = swap
                        head = temp[0] + '|' + temp[1] + '|Y|'
                        tail = ' '.join(temp[2:])
                        result = "<--" + head + tail
                        print(result)
                        output.write(result + '\n')
                        continue
                if temp[1] in valid_tags:
                    head = temp[0] + '|' + temp[1] + '|Y|'
                    tail = ' '.join(temp[2:])
                    result = "<--" + head + tail
                    print(result)
                    output.write(result  + '\n')
                    continue
                elif temp[1] not in valid_tags:
                    head = temp[0] + '|' + temp[1] + '|N|'
                    tail = ' '.join(temp[2:])
                    result = "<--" + head + tail
                    print(result)
                    output.write(result  + '\n')
                    continue


def ExtractValidRecords(GEDCOM_processed_path, valid_record_path):
    """
    :param GEDCOM_processed_path: the path of preprocessed file generated by ProcessGEDCOM function
    :param valid_record_path: the path of output file
    :return:
    """
    with open(valid_record_path, 'w') as output:
        output.write("NOTE: Created by Hongzhi Zhao, CWID:10478411" + '\n\n')
        for line in open(GEDCOM_processed_path, mode='r', encoding='UTF-8-sig'):
            if line != "\n":
                if line.split(' ')[0] == 'NOTE:':
                    continue
                temp = line.split("|")
                last_string = temp[-1][0:-1]
                temp[-1] = last_string
                # print(temp)
                if temp[2] == 'Y':
                    if temp[0] == '<--0':
                        print('------------------')
                        print('|'.join(temp))
                        output.write('------------------' + '\n')
                    if temp[0] == '<--1':
                        print("  " + '|'.join(temp))
                    if temp[0] == '<--2':
                        print("    " + '|'.join(temp))
                    output.write('|'.join(temp) + '\n')


def AgeCalculate(birthday: list, present_or_death: list):
    """
    :param birthday: the birthday list, format: [day, month, year]
    :param present_or_death: format: [day, month, year]
    :return: age
    """
    birthday = [int(i) for i in birthday]
    present_or_death = [int(i) for i in present_or_death]

    age = present_or_death[2] - birthday[2]
    if present_or_death[1] - birthday[1] < 0:
        age -= 1
    if present_or_death[1] - birthday[1] == 0:  # this month is your birthday month!
        if present_or_death[0] - birthday[0] < 0:  # not your birthday yet~ not that age yet
            age -= 1
    return age


def RemoveBackslashN(line):
    """
    :param line: line(which is a string) read directly from IO
    :return: list of line without backslash n
    """
    temp = line.split("|")
    last_string = temp[-1][0:-1]
    temp[-1] = last_string
    return temp


def GenerateTable(valid_record_path, table_path):
    """
    traverse the entire preprocessed GEDCOM records and extract information of individuals and families
    :param valid_record_path: preprocessed file
    :param table_path: the path of the table
    :return: 2 tables
    """
    file = open(valid_record_path, mode='r', encoding='UTF-8-sig')
    individuals = []
    families = []
    while True:
        line = file.readline()
        if line != "\n":
            if line.split(' ')[0] == 'NOTE:':
                continue
            temp = RemoveBackslashN(line)
            if temp[0] == '<--0' and temp[1] == 'INDI':  # find a person
                person_info = {"ID": temp[3][1:-1], "Name": "NA", "Gender": "NA", "Birthday": "NA", "Age": "NA",
                               "Alive": "NA", "Death": "NA", "Child": "NA", "Spouse": "NA"}
                while True:
                    line = file.readline()
                    if line == '------------------\n':
                        break
                    temp = RemoveBackslashN(line)
                    if temp[1] == "NAME":
                        person_info["Name"] = temp[3]
                        continue
                    if temp[1] == "SEX":
                        person_info["Gender"] = temp[3]
                        continue
                    if temp[1] == "BIRT":
                        line = file.readline()
                        temp = RemoveBackslashN(line)
                        birth_date = temp[3].split(' ')
                        birth_date[-2] = month_dict[birth_date[-2]]
                        if birth_date[0] == "ABT":
                            birth_date.remove("ABT")
                            person_info["Birthday"] = "about " + '-'.join(birth_date[::-1])
                        else:
                            person_info["Birthday"] = '-'.join(birth_date[::-1])

                        line = file.readline()  # read next line, maybe it's death date
                        temp = RemoveBackslashN(line)
                        if temp[1] == "DATE":  # if there's a second date under BIRT, it's death date
                            death_date = temp[3].split(' ')
                            death_date[-2] = month_dict[death_date[-2]]
                            if death_date[0] == "ABT":
                                death_date.remove("ABT")
                                person_info["Death"] = "about " + '-'.join(death_date[::-1])
                            else:
                                person_info["Death"] = '-'.join(death_date[::-1])
                            #  calculate the age and set the Alive status to False
                            person_info["Age"] = AgeCalculate(birth_date, death_date)
                            person_info["Alive"] = "False"
                            continue
                        else:  # if there's no death date, then calculate, set the Alive status
                            present_date = time.strftime("%d-%m-%Y", time.localtime()).split('-')
                            person_info["Age"] = AgeCalculate(birth_date, present_date)
                            person_info["Alive"] = "True"
                    if temp[1] == "FAMC":
                        person_info["Child"] = temp[3][1:-1]
                        continue
                    if temp[1] == "FAMS":
                        person_info["Spouse"] = temp[3][1:-1]
                        continue
                individuals.append(person_info)
            if temp[0] == '<--0' and temp[1] == 'FAM':  # find a family
                family_info = {"ID": temp[3][1:-1], "Married": "NA", "Divorced": "NA", "Husband ID": "NA",
                               "Husband Name": "NA", "Wife ID": "NA", "Wife Name": "NA", "Children": "NA"}
                Children = []
                while True:
                    line = file.readline()
                    if line == '------------------\n':
                        break
                    temp = RemoveBackslashN(line)
                    if temp[1] == "HUSB":
                        family_info["Husband ID"] = temp[3][1:-1]
                        for record in individuals:
                            if record["ID"] == family_info["Husband ID"]:
                                family_info["Husband Name"] = record["Name"]
                        continue
                    if temp[1] == "WIFE":
                        family_info["Wife ID"] = temp[3][1:-1]
                        for record in individuals:
                            if record["ID"] == family_info["Wife ID"]:
                                family_info["Wife Name"] = record["Name"]
                        continue
                    if temp[1] == "CHIL":
                        Children.append(temp[3][1:-1])
                        continue
                    if temp[1] == "MARR":
                        family_info["Married"] = "Y"
                family_info["Children"] = Children
                families.append(family_info)
            if temp[0] == '<--0' and temp[1] == 'TRLR':
                break
    table_indi = PrettyTable()
    table_indi.field_names = ["ID", "Name", "Gender", "Birthday", "Age",
                     "Alive", "Death", "Child", "Spouse"]
    for record in individuals:
        table_indi.add_row([record["ID"], record["Name"], record["Gender"], record["Birthday"], record["Age"],
                     record["Alive"], record["Death"], record["Child"], record["Spouse"]])
    print("Individuals")
    print(table_indi)
    table_fami = PrettyTable()
    table_fami.field_names = ["ID", "Married", "Divorced", "Husband ID", "Husband Name",
                     "Wife ID", "Wife Name", "Children"]
    for record in families:
        table_fami.add_row([record["ID"], record["Married"], record["Divorced"], record["Husband ID"], record["Husband Name"],
                     record["Wife ID"], record["Wife Name"], record["Children"]])
    print("Families")
    print(table_fami)

    with open(table_path, 'w') as output:
        output.write('Individuals:\n')
        output.write(str(table_indi) + '\n')
        output.write('Families:\n')
        output.write(str(table_fami) + '\n')





if __name__ == '__main__':
    ProcessGEDCOM("White-Family.ged", "PreprocessedOutput.txt")
    print("---------------------------------------------------------------")
    ExtractValidRecords("PreprocessedOutput.txt", "ValidRecords.txt")
    print("---------------------------------------------------------------")
    GenerateTable("ValidRecords.txt", "2Tables.txt")